#!/usr/bin/env python3
"""
G√ºvenlik ve Kod Kalitesi Analiz Agent'ƒ±
SonarQube ve Fortify benzeri ara√ßlarƒ±n raporlarƒ±nƒ± analiz eder ve d√ºzeltme √∂nerileri sunar
"""

import requests
import yaml
import json
import re
import os
import argparse
import shutil
from datetime import datetime
from typing import Dict, List, Any, Tuple
from dataclasses import dataclass
from pathlib import Path
from simple_but_effective_analyzer import SimpleEffectiveAnalyzer, SimpleFinding
from sonarqube_api import SonarQubeAnalyzer

@dataclass
class SecurityFinding:
    """G√ºvenlik bulgusu veri yapƒ±sƒ±"""
    rule_id: str
    severity: str
    message: str
    file_path: str
    line_number: int
    category: str
    description: str
    recommendation: str
    fix_suggestion: str = ""

@dataclass
class QualityFinding:
    """Kod kalitesi bulgusu veri yapƒ±sƒ±"""
    rule_id: str
    severity: str
    message: str
    file_path: str
    line_number: int
    category: str
    description: str
    recommendation: str
    fix_suggestion: str = ""

@dataclass
class FixSuggestion:
    """D√ºzeltme √∂nerisi veri yapƒ±sƒ±"""
    file_path: str
    line_number: int
    original_code: str
    fixed_code: str
    rule_id: str
    description: str
    confidence: float

class SecurityQualityAgent:
    """G√ºvenlik ve kod kalitesi analiz agent'ƒ±"""
    
    def __init__(self):
        self.security_findings = []
        self.quality_findings = []
        self.simple_findings = []
        self.fix_suggestions = []
        self.rules = self.load_rules()
        self.simple_analyzer = SimpleEffectiveAnalyzer()
        self.sonarqube_analyzer = None
        
    def load_rules(self) -> Dict:
        """Kurallarƒ± y√ºkle - T√úM SONARQUBE KURALLARINI DAHIL ET!"""
        # Ana kurallar
        rules_path = Path(__file__).parent / "rules" / "security_quality_rules.yaml"
        advanced_rules_path = Path(__file__).parent / "rules" / "advanced_sonarqube_rules.yaml"
        all_java_rules_path = Path(__file__).parent / "rules" / "all_sonarqube_java_rules.yaml"
        
        combined_rules = {}
        
        # Ana kurallarƒ± y√ºkle
        if rules_path.exists():
            with open(rules_path, 'r', encoding='utf-8') as f:
                main_rules = yaml.safe_load(f)
                combined_rules.update(main_rules)
        
        # Geli≈ümi≈ü SonarQube kurallarƒ±nƒ± y√ºkle
        if advanced_rules_path.exists():
            with open(advanced_rules_path, 'r', encoding='utf-8') as f:
                advanced_rules = yaml.safe_load(f)
                # Geli≈ümi≈ü kurallarƒ± ana kurallara ekle
                if 'advanced_sonarqube_rules' in advanced_rules:
                    for category, rules in advanced_rules['advanced_sonarqube_rules'].items():
                        if category not in combined_rules:
                            combined_rules[category] = {}
                        combined_rules[category].update(rules)
        
        # T√úM 833 JAVA KURALINI Y√úKLE!
        if all_java_rules_path.exists():
            print("üöÄ 833 Java kuralƒ± y√ºkleniyor...")
            with open(all_java_rules_path, 'r', encoding='utf-8') as f:
                all_java_rules = yaml.safe_load(f)
                # Java kurallarƒ±nƒ± ana kurallara ekle
                if 'all_sonarqube_java_rules' in all_java_rules:
                    # T√ºm kategorileri ekle
                    for category, rules in all_java_rules['all_sonarqube_java_rules'].items():
                        if category not in combined_rules:
                            combined_rules[category] = {}
                        combined_rules[category].update(rules)
                    print(f"‚úÖ {sum(len(rules) for rules in all_java_rules['all_sonarqube_java_rules'].values())} Java kuralƒ± eklendi!")
        
        if combined_rules:
            total_rules = sum(len(rules) for rules in combined_rules.values())
            print(f"‚úÖ TOPLAM {total_rules} KURAL Y√úKLENDƒ∞!")
            return combined_rules
        
        return self.get_default_rules()
    
    def get_default_rules(self) -> Dict:
        """Varsayƒ±lan kurallarƒ± d√∂nd√ºr"""
        return {
            "security_rules": {
                "SQL_INJECTION": {
                    "pattern": r"(executeQuery|executeUpdate|prepareStatement).*\+.*\$",
                    "severity": "HIGH",
                    "category": "SQL Injection",
                    "description": "SQL injection a√ßƒ±ƒüƒ± tespit edildi",
                    "recommendation": "PreparedStatement kullanƒ±n ve parametreleri g√ºvenli ≈üekilde baƒülayƒ±n",
                    "fix_pattern": r"(executeQuery|executeUpdate|prepareStatement)\s*\(\s*([^)]+)\s*\+\s*([^)]+)\s*\)",
                    "fix_replacement": r"PreparedStatement stmt = connection.prepareStatement(\2);\nstmt.setString(1, \3);\nstmt.executeQuery();"
                },
                "XSS": {
                    "pattern": r"innerHTML|outerHTML|document\.write.*\+",
                    "severity": "HIGH", 
                    "category": "Cross-Site Scripting",
                    "description": "XSS a√ßƒ±ƒüƒ± tespit edildi",
                    "recommendation": "innerHTML yerine textContent kullanƒ±n, input'larƒ± doƒürulayƒ±n",
                    "fix_pattern": r"innerHTML\s*=\s*([^;]+)",
                    "fix_replacement": r"textContent = \1"
                },
                "HARDCODED_PASSWORD": {
                    "pattern": r"password\s*=\s*['\"][^'\"]+['\"]",
                    "severity": "MEDIUM",
                    "category": "Hardcoded Credentials",
                    "description": "Hardcoded ≈üifre tespit edildi",
                    "recommendation": "≈ûifreleri environment variable veya secrets manager'da tutun",
                    "fix_pattern": r"password\s*=\s*['\"]([^'\"]+)['\"]",
                    "fix_replacement": r"password = System.getenv(\"DB_PASSWORD\")"
                },
                "WEAK_ENCRYPTION": {
                    "pattern": r"MD5|SHA1|DES\(",
                    "severity": "HIGH",
                    "category": "Weak Cryptography",
                    "description": "Zayƒ±f ≈üifreleme algoritmasƒ± kullanƒ±lƒ±yor",
                    "recommendation": "SHA-256, bcrypt gibi g√º√ßl√º algoritmalar kullanƒ±n",
                    "fix_pattern": r"MD5\(",
                    "fix_replacement": r"SHA-256("
                }
            },
            "quality_rules": {
                "LONG_METHOD": {
                    "pattern": r"def\s+\w+\([^)]*\):[\s\S]{500,}",
                    "severity": "MEDIUM",
                    "category": "Code Complexity",
                    "description": "√áok uzun metod tespit edildi",
                    "recommendation": "Metodu daha k√º√ß√ºk par√ßalara b√∂l√ºn",
                    "fix_pattern": r"def\s+(\w+)\s*\([^)]*\):([\s\S]{500,})",
                    "fix_replacement": r"def \1(self):\n    # TODO: Bu metodu daha k√º√ß√ºk par√ßalara b√∂l√ºn\n    pass"
                },
                "DUPLICATE_CODE": {
                    "pattern": r"(\w+\s*\([^)]*\)\s*\{[\s\S]{10,}\})\1",
                    "severity": "MEDIUM",
                    "category": "Code Duplication",
                    "description": "Kod tekrarƒ± tespit edildi",
                    "recommendation": "Ortak kodu metod veya sƒ±nƒ±f haline getirin",
                    "fix_pattern": r"(\w+\s*\([^)]*\)\s*\{[\s\S]{10,}\})\1",
                    "fix_replacement": r"// TODO: Bu kod tekrarƒ±nƒ± ortak bir metoda √ßƒ±karƒ±n\n\1"
                },
                "MAGIC_NUMBER": {
                    "pattern": r"\b\d{3,}\b",
                    "severity": "LOW",
                    "category": "Code Quality",
                    "description": "Magic number tespit edildi",
                    "recommendation": "Sabit deƒüerleri named constant olarak tanƒ±mlayƒ±n",
                    "fix_pattern": r"\b(\d{3,})\b",
                    "fix_replacement": r"CONSTANT_\1"
                },
                "UNUSED_IMPORT": {
                    "pattern": r"import\s+\w+(?:\s+as\s+\w+)?(?!\s*#\s*used)",
                    "severity": "LOW",
                    "category": "Code Quality", 
                    "description": "Kullanƒ±lmayan import tespit edildi",
                    "recommendation": "Kullanƒ±lmayan import'larƒ± kaldƒ±rƒ±n",
                    "fix_pattern": r"import\s+(\w+)(?:\s+as\s+\w+)?(?!\s*#\s*used)",
                    "fix_replacement": r"// TODO: Kullanƒ±lmayan import kaldƒ±rƒ±ldƒ±: \1"
                },
                "DEBUG_CODE": {
                    "pattern": r"console\.log|System\.out\.println|print\(",
                    "severity": "LOW",
                    "category": "Debug Code",
                    "description": "Debug kodu production'da bƒ±rakƒ±lmƒ±≈ü",
                    "recommendation": "Debug kodlarƒ±nƒ± kaldƒ±rƒ±n veya log seviyesini ayarlayƒ±n",
                    "fix_pattern": r"(console\.log|System\.out\.println|print\()([^)]*)\)",
                    "fix_replacement": r"// TODO: Debug kodu kaldƒ±rƒ±ldƒ±\n// logger.debug(\2)"
                },
                "BAD_VARIABLE_NAME": {
                    "pattern": r"\b[a-z]\w*\s*=",
                    "severity": "LOW",
                    "category": "Naming Conventions",
                    "description": "Deƒüi≈üken ismi camelCase olmalƒ±",
                    "recommendation": "Deƒüi≈üken isimlerini camelCase yapƒ±n",
                    "fix_pattern": r"\b([a-z])(\w*)\s*=",
                    "fix_replacement": r"\1\2 ="
                }
            }
        }
    
    def generate_fix_suggestions(self) -> List[FixSuggestion]:
        """D√ºzeltme √∂nerileri olu≈ütur"""
        suggestions = []
        
        # G√ºvenlik bulgularƒ± i√ßin d√ºzeltme √∂nerileri
        for finding in self.security_findings:
            if finding.rule_id in self.rules["security_rules"]:
                rule = self.rules["security_rules"][finding.rule_id]
                if "fix_pattern" in rule and "fix_replacement" in rule:
                    suggestion = self.create_fix_suggestion(
                        finding.file_path, 
                        finding.line_number, 
                        finding.message, 
                        rule["fix_pattern"], 
                        rule["fix_replacement"], 
                        finding.rule_id, 
                        finding.description
                    )
                    if suggestion:
                        suggestions.append(suggestion)
        
        # Kalite bulgularƒ± i√ßin d√ºzeltme √∂nerileri
        for finding in self.quality_findings:
            if finding.rule_id in self.rules["quality_rules"]:
                rule = self.rules["quality_rules"][finding.rule_id]
                if "fix_pattern" in rule and "fix_replacement" in rule:
                    suggestion = self.create_fix_suggestion(
                        finding.file_path, 
                        finding.line_number, 
                        finding.message, 
                        rule["fix_pattern"], 
                        rule["fix_replacement"], 
                        finding.rule_id, 
                        finding.description
                    )
                    if suggestion:
                        suggestions.append(suggestion)
        
        return suggestions
    
    def create_fix_suggestion(self, file_path: str, line_number: int, original_code: str, 
                            fix_pattern: str, fix_replacement: str, rule_id: str, description: str) -> FixSuggestion:
        """Tekil d√ºzeltme √∂nerisi olu≈ütur"""
        try:
            # Dosyadan satƒ±rƒ± oku
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if line_number <= len(lines):
                full_line = lines[line_number - 1].rstrip('\n')
                
                # Orijinal kodu d√ºzelt
                fixed_code = re.sub(fix_pattern, fix_replacement, full_line)
                
                if fixed_code != full_line:
                    return FixSuggestion(
                        file_path=file_path,
                        line_number=line_number,
                        original_code=full_line,
                        fixed_code=fixed_code,
                        rule_id=rule_id,
                        description=description,
                        confidence=0.8
                    )
        except Exception as e:
            print(f"‚ö†Ô∏è  D√ºzeltme √∂nerisi olu≈üturulamadƒ±: {e}")
        
        return None
    
    def apply_fixes(self, suggestions: List[FixSuggestion], backup: bool = True) -> Dict[str, int]:
        """D√ºzeltme √∂nerilerini uygula"""
        results = {"success": 0, "failed": 0, "skipped": 0}
        
        for suggestion in suggestions:
            try:
                file_path = suggestion.file_path
                
                # Yedek olu≈ütur
                if backup and os.path.exists(file_path):
                    backup_path = f"{file_path}.backup"
                    shutil.copy2(file_path, backup_path)
                
                # Dosyayƒ± oku
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # Satƒ±r numarasƒ±nƒ± kontrol et
                if suggestion.line_number <= len(lines):
                    line_index = suggestion.line_number - 1
                    original_line = lines[line_index]
                    
                    # D√ºzeltmeyi uygula
                    if suggestion.original_code in original_line:
                        lines[line_index] = original_line.replace(
                            suggestion.original_code, 
                            suggestion.fixed_code
                        )
                        
                        # Dosyayƒ± yaz
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.writelines(lines)
                        
                        results["success"] += 1
                        print(f"‚úÖ D√ºzeltme uygulandƒ±: {file_path}:{suggestion.line_number}")
                    else:
                        results["skipped"] += 1
                        print(f"‚è≠Ô∏è  D√ºzeltme atlandƒ±: {file_path}:{suggestion.line_number} (kod deƒüi≈ümi≈ü)")
                else:
                    results["failed"] += 1
                    print(f"‚ùå D√ºzeltme ba≈üarƒ±sƒ±z: {file_path}:{suggestion.line_number} (satƒ±r bulunamadƒ±)")
                    
            except Exception as e:
                results["failed"] += 1
                print(f"‚ùå D√ºzeltme ba≈üarƒ±sƒ±z: {file_path} - {e}")
        
        return results
    
    def scan_file(self, file_path: str) -> None:
        """Dosyayƒ± tara"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
            # G√ºvenlik kurallarƒ±nƒ± kontrol et
            for rule_id, rule in self.rules["security_rules"].items():
                matches = re.finditer(rule["pattern"], content, re.MULTILINE)
                for match in matches:
                    line_num = content[:match.start()].count('\n') + 1
                    finding = SecurityFinding(
                        rule_id=rule_id,
                        severity=rule["severity"],
                        message=match.group(0),
                        file_path=file_path,
                        line_number=line_num,
                        category=rule["category"],
                        description=rule["description"],
                        recommendation=rule["recommendation"]
                    )
                    self.security_findings.append(finding)
            
            # Kalite kurallarƒ±nƒ± kontrol et
            for rule_id, rule in self.rules["quality_rules"].items():
                matches = re.finditer(rule["pattern"], content, re.MULTILINE)
                for match in matches:
                    line_num = content[:match.start()].count('\n') + 1
                    finding = QualityFinding(
                        rule_id=rule_id,
                        severity=rule["severity"],
                        message=match.group(0),
                        file_path=file_path,
                        line_number=line_num,
                        category=rule["category"],
                        description=rule["description"],
                        recommendation=rule["recommendation"]
                    )
                    self.quality_findings.append(finding)
            
            # JAVA KURALLARINI KONTROL ET!
            if file_path.endswith('.java'):
                # T√ºm kategorilerdeki Java kurallarƒ±nƒ± kontrol et
                for category, rules in self.rules.items():
                    if category in ['bugs', 'code_smells', 'vulnerabilities']:
                        for rule_id, rule in rules.items():
                            # Pattern varsa kontrol et
                            if "pattern" in rule and rule["pattern"] and rule["pattern"] != ".*":
                                try:
                                    matches = re.finditer(rule["pattern"], content, re.MULTILINE)
                                    for match in matches:
                                        line_num = content[:match.start()].count('\n') + 1
                                        
                                        # Severity mapping
                                        severity = rule.get("severity", "MEDIUM")
                                        if severity == "MINOR":
                                            severity = "LOW"
                                        elif severity == "MAJOR":
                                            severity = "MEDIUM"
                                        elif severity == "BLOCKER":
                                            severity = "CRITICAL"
                                        
                                        finding = QualityFinding(
                                            rule_id=rule_id,
                                            severity=severity,
                                            message=match.group(0),
                                            file_path=file_path,
                                            line_number=line_num,
                                            category=rule.get("category", f"Java {category}"),
                                            description=rule.get("description", rule.get("name", f"Java {category} rule violation")),
                                            recommendation=rule.get("recommendation", "Check SonarQube documentation")
                                        )
                                        self.quality_findings.append(finding)
                                except Exception as e:
                                    # Regex hatasƒ± varsa atla
                                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è  Dosya taranamadƒ± {file_path}: {e}")
    
    def scan_directory(self, directory: str) -> None:
        """Dizini tara"""
        extensions = ['.py', '.java', '.js', '.ts', '.php', '.rb', '.go', '.cs']
        
        for root, dirs, files in os.walk(directory):
            # .git, node_modules gibi klas√∂rleri atla
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['node_modules', 'vendor', 'target']]
            
            for file in files:
                if any(file.endswith(ext) for ext in extensions):
                    file_path = os.path.join(root, file)
                    self.scan_file(file_path)
        
        # Basit ama etkili analiz
        print("üîç Basit ama etkili analiz yapƒ±lƒ±yor...")
        simple_findings = self.simple_analyzer.analyze_directory(directory)
        self.simple_findings = simple_findings
        print(f"‚úÖ Basit analiz tamamlandƒ±: {len(simple_findings)} bulgu")
    
    def fetch_online_reports(self, project_url: str, sonarqube_url: str = None, sonarqube_token: str = None, project_key: str = None, max_issues: int = None) -> Dict:
        """Online raporlarƒ± √ßek - T√úM ISSUE'LARI √áEKER!"""
        print(f"üîç Online raporlar √ßekiliyor: {project_url}")
        
        result = {}
        
        # SonarQube analizi
        if sonarqube_url and project_key:
            try:
                self.sonarqube_analyzer = SonarQubeAnalyzer(sonarqube_url, sonarqube_token)
                print(f"üöÄ SonarQube analizi ba≈ülatƒ±lƒ±yor... (maksimum issue: {'sƒ±nƒ±rsƒ±z' if max_issues is None else max_issues})")
                sonarqube_result = self.sonarqube_analyzer.analyze_project(project_key, max_issues=max_issues)
                formatted_result = self.sonarqube_analyzer.format_for_report(sonarqube_result)
                result.update(formatted_result)
                print(f"‚úÖ SonarQube analizi tamamlandƒ± - {sonarqube_result['issues']['total']} issue √ßekildi!")
            except Exception as e:
                print(f"‚ö†Ô∏è  SonarQube analizi ba≈üarƒ±sƒ±z: {e}")
                # Fallback: sim√ºle edilmi≈ü veriler
                result["sonarqube"] = {
                    "bugs": 5,
                    "vulnerabilities": 3,
                    "code_smells": 12,
                    "coverage": 78.5,
                    "duplicated_lines": 8.2
                }
        else:
            # Sim√ºle edilmi≈ü rapor verileri
            result = {
                "sonarqube": {
                    "bugs": 5,
                    "vulnerabilities": 3,
                    "code_smells": 12,
                    "coverage": 78.5,
                    "duplicated_lines": 8.2
                },
                "fortify": {
                    "critical": 1,
                    "high": 4,
                    "medium": 7,
                    "low": 15
                },
                "snyk": {
                    "vulnerabilities": 6,
                    "licenses": 2,
                    "dependencies": 45
                }
            }
        
        return result
    
    def generate_report(self, output_path: str, online_reports: Dict = None) -> None:
        """Detaylƒ± rapor olu≈ütur"""
        report = []
        report.append("# üîí G√ºvenlik ve Kod Kalitesi Analiz Raporu")
        report.append(f"**Olu≈üturulma Tarihi:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # √ñzet istatistikler
        total_security = len(self.security_findings)
        total_quality = len(self.quality_findings)
        total_simple = len(self.simple_findings)
        
        # Severity daƒüƒ±lƒ±mƒ±
        security_by_severity = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        quality_by_severity = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        simple_by_severity = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        
        for finding in self.security_findings:
            # MINOR'u LOW'a √ßevir, MAJOR'u MEDIUM'a √ßevir, BLOCKER'ƒ± CRITICAL'a √ßevir
            severity = finding.severity
            if severity == "MINOR":
                severity = "LOW"
            elif severity == "MAJOR":
                severity = "MEDIUM"
            elif severity == "BLOCKER":
                severity = "CRITICAL"
            security_by_severity[severity] += 1
        
        for finding in self.quality_findings:
            # MINOR'u LOW'a √ßevir, MAJOR'u MEDIUM'a √ßevir, BLOCKER'ƒ± CRITICAL'a √ßevir
            severity = finding.severity
            if severity == "MINOR":
                severity = "LOW"
            elif severity == "MAJOR":
                severity = "MEDIUM"
            elif severity == "BLOCKER":
                severity = "CRITICAL"
            quality_by_severity[severity] += 1
        
        for finding in self.simple_findings:
            # MINOR'u LOW'a √ßevir, MAJOR'u MEDIUM'a √ßevir, BLOCKER'ƒ± CRITICAL'a √ßevir
            severity = finding.severity
            if severity == "MINOR":
                severity = "LOW"
            elif severity == "MAJOR":
                severity = "MEDIUM"
            elif severity == "BLOCKER":
                severity = "CRITICAL"
            simple_by_severity[severity] += 1
        
        report.append("## üìä √ñzet")
        report.append(f"- **Toplam G√ºvenlik Bulgusu:** {total_security}")
        report.append(f"  - üî¥ Y√ºksek: {security_by_severity['HIGH']}")
        report.append(f"  - üü† Orta: {security_by_severity['MEDIUM']}")
        report.append(f"  - üü° D√º≈ü√ºk: {security_by_severity['LOW']}")
        report.append(f"- **Toplam Kalite Bulgusu:** {total_quality}")
        report.append(f"  - üî¥ Y√ºksek: {quality_by_severity['HIGH']}")
        report.append(f"  - üü† Orta: {quality_by_severity['MEDIUM']}")
        report.append(f"  - üü° D√º≈ü√ºk: {quality_by_severity['LOW']}")
        report.append(f"- **Toplam Basit Analiz Bulgusu:** {total_simple}")
        report.append(f"  - ‚ö´ Kritik: {simple_by_severity['CRITICAL']}")
        report.append(f"  - üî¥ Y√ºksek: {simple_by_severity['HIGH']}")
        report.append(f"  - üü† Orta: {simple_by_severity['MEDIUM']}")
        report.append(f"  - üü° D√º≈ü√ºk: {simple_by_severity['LOW']}")
        report.append(f"- **Toplam Bulgu:** {total_security + total_quality + total_simple}")
        report.append("")
        
        # Online raporlar
        if online_reports:
            report.append("## üåê Online Analiz Sonu√ßlarƒ±")
            report.append("")
            
            if "sonarqube" in online_reports:
                sq = online_reports["sonarqube"]
                report.append("### SonarQube")
                report.append(f"- üêõ Hatalar: {sq['bugs']}")
                report.append(f"- üî¥ G√ºvenlik A√ßƒ±klarƒ±: {sq['vulnerabilities']}")
                report.append(f"- ‚ö†Ô∏è Kod Kokularƒ±: {sq['code_smells']}")
                report.append(f"- üìä Test Kapsamƒ±: {sq['coverage']}%")
                report.append(f"- üìã Tekrarlanan Kod: {sq['duplicated_lines']}%")
                report.append("")
            
            if "fortify" in online_reports:
                ft = online_reports["fortify"]
                report.append("### Fortify")
                report.append(f"- üî¥ Kritik: {ft['critical']}")
                report.append(f"- üü† Y√ºksek: {ft['high']}")
                report.append(f"- üü° Orta: {ft['medium']}")
                report.append(f"- üü¢ D√º≈ü√ºk: {ft['low']}")
                report.append("")
            
            if "snyk" in online_reports:
                snyk = online_reports["snyk"]
                report.append("### Snyk")
                report.append(f"- üî¥ G√ºvenlik A√ßƒ±klarƒ±: {snyk['vulnerabilities']}")
                report.append(f"- ‚ö†Ô∏è Lisans Sorunlarƒ±: {snyk['licenses']}")
                report.append(f"- üì¶ Baƒüƒ±mlƒ±lƒ±klar: {snyk['dependencies']}")
                report.append("")
        
        # G√ºvenlik bulgularƒ±
        if self.security_findings:
            report.append("## üîí G√ºvenlik Bulgularƒ±")
            report.append("")
            
            by_severity = {"CRITICAL": [], "HIGH": [], "MEDIUM": [], "LOW": []}
            for finding in self.security_findings:
                # Severity mapping
                severity = finding.severity
                if severity == "MINOR":
                    severity = "LOW"
                elif severity == "MAJOR":
                    severity = "MEDIUM"
                elif severity == "BLOCKER":
                    severity = "CRITICAL"
                by_severity[severity].append(finding)
            
            # Sadece MEDIUM ve √ºst√º bulgularƒ± g√∂ster
            important_severities = ["CRITICAL", "HIGH", "MEDIUM"]
            
            for severity in important_severities:
                findings = by_severity[severity]
                if findings:
                    severity_icon = {"CRITICAL": "‚ö´", "HIGH": "üî¥", "MEDIUM": "üü†"}[severity]
                    report.append(f"### {severity_icon} {severity}")
                    report.append("")
                    
                    for finding in findings:
                        report.append(f"#### {finding.rule_id}")
                        report.append(f"- **Dosya:** `{finding.file_path}:{finding.line_number}`")
                        report.append(f"- **Kategori:** {finding.category}")
                        report.append(f"- **A√ßƒ±klama:** {finding.description}")
                        report.append(f"- **Kod:** `{finding.message[:200]}...`")
                        report.append(f"- **√ñneri:** {finding.recommendation}")
                        report.append("")
            
            # LOW bulgularƒ± varsa √∂zet bilgi ver
            if by_severity["LOW"]:
                report.append(f"*Not: {len(by_severity['LOW'])} d√º≈ü√ºk √∂ncelikli g√ºvenlik bulgusu gizlendi*")
                report.append("")
        
        # Kalite bulgularƒ±
        if self.quality_findings:
            report.append("## üìà Kod Kalitesi Bulgularƒ±")
            report.append("")
            
            by_severity = {"CRITICAL": [], "HIGH": [], "MEDIUM": [], "LOW": []}
            for finding in self.quality_findings:
                # Severity mapping
                severity = finding.severity
                if severity == "MINOR":
                    severity = "LOW"
                elif severity == "MAJOR":
                    severity = "MEDIUM"
                elif severity == "BLOCKER":
                    severity = "CRITICAL"
                by_severity[severity].append(finding)
            
            # Sadece MEDIUM ve √ºst√º bulgularƒ± g√∂ster
            important_severities = ["CRITICAL", "HIGH", "MEDIUM"]
            
            for severity in important_severities:
                findings = by_severity[severity]
                if findings:
                    severity_icon = {"CRITICAL": "‚ö´", "HIGH": "üî¥", "MEDIUM": "üü†"}[severity]
                    report.append(f"### {severity_icon} {severity}")
                    report.append("")
                    
                    for finding in findings:
                        report.append(f"#### {finding.rule_id}")
                        report.append(f"- **Dosya:** `{finding.file_path}:{finding.line_number}`")
                        report.append(f"- **Kategori:** {finding.category}")
                        report.append(f"- **A√ßƒ±klama:** {finding.description}")
                        report.append(f"- **Kod:** `{finding.message[:200]}...`")
                        report.append(f"- **√ñneri:** {finding.recommendation}")
                        report.append("")
            
            # LOW bulgularƒ± varsa √∂zet bilgi ver
            if by_severity["LOW"]:
                report.append(f"*Not: {len(by_severity['LOW'])} d√º≈ü√ºk √∂ncelikli kalite bulgusu gizlendi*")
                report.append("")
        
        # Basit Analiz Bulgularƒ±
        if self.simple_findings:
            report.append("## üîç Basit Ama Etkili Analiz")
            report.append("")
            
            by_severity = {"CRITICAL": [], "HIGH": [], "MEDIUM": [], "LOW": []}
            for finding in self.simple_findings:
                # Severity mapping
                severity = finding.severity
                if severity == "MINOR":
                    severity = "LOW"
                elif severity == "MAJOR":
                    severity = "MEDIUM"
                elif severity == "BLOCKER":
                    severity = "CRITICAL"
                by_severity[severity].append(finding)
            
            # Sadece MEDIUM ve √ºst√º bulgularƒ± g√∂ster
            important_severities = ["CRITICAL", "HIGH", "MEDIUM"]
            
            for severity in important_severities:
                findings = by_severity[severity]
                if findings:
                    severity_icon = {"CRITICAL": "‚ö´", "HIGH": "üî¥", "MEDIUM": "üü†"}[severity]
                    report.append(f"### {severity_icon} {severity}")
                    report.append("")
                    
                    for finding in findings:
                        report.append(f"#### {finding.rule_id}")
                        report.append(f"- **Dosya:** `{finding.file_path}:{finding.line_number}`")
                        report.append(f"- **Kategori:** {finding.category}")
                        report.append(f"- **Mesaj:** {finding.message}")
                        if finding.fix_suggestion:
                            report.append(f"- **D√ºzeltme √ñnerisi:** {finding.fix_suggestion}")
                        report.append("")
            
            # LOW bulgularƒ± varsa √∂zet bilgi ver
            if by_severity["LOW"]:
                report.append(f"*Not: {len(by_severity['LOW'])} d√º≈ü√ºk √∂ncelikli basit analiz bulgusu gizlendi*")
                report.append("")
        
        # Dosya bazlƒ± analiz
        report.append("## üìÅ Dosya Bazlƒ± Analiz")
        report.append("")
        
        # En √ßok sorunlu dosyalar
        file_issues = {}
        for finding in self.security_findings + self.quality_findings + self.simple_findings:
            if finding.file_path not in file_issues:
                file_issues[finding.file_path] = {"security": 0, "quality": 0, "simple": 0, "critical": 0, "high": 0, "medium": 0, "low": 0}
            
            if isinstance(finding, SecurityFinding):
                file_issues[finding.file_path]["security"] += 1
            elif isinstance(finding, QualityFinding):
                file_issues[finding.file_path]["quality"] += 1
            elif isinstance(finding, SimpleFinding):
                file_issues[finding.file_path]["simple"] += 1
            
            # Severity mapping
            severity = finding.severity.lower()
            if severity == "minor":
                severity = "low"
            elif severity == "major":
                severity = "medium"
            elif severity == "blocker":
                severity = "critical"
            
            file_issues[finding.file_path][severity] += 1
        
        # En √ßok sorunlu 10 dosya
        sorted_files = sorted(file_issues.items(), key=lambda x: x[1]["security"] + x[1]["quality"], reverse=True)
        
        report.append("### üî• En √áok Sorunlu Dosyalar")
        report.append("")
        for i, (file_path, issues) in enumerate(sorted_files[:10], 1):
            total_issues = issues["security"] + issues["quality"] + issues["simple"]
            report.append(f"{i}. **{file_path}**")
            report.append(f"   - üîí G√ºvenlik: {issues['security']}")
            report.append(f"   - üìà Kalite: {issues['quality']}")
            report.append(f"   - üîç Basit Analiz: {issues['simple']}")
            report.append(f"   - üî¥ Y√ºksek: {issues['high']}")
            report.append(f"   - üü† Orta: {issues['medium']}")
            report.append(f"   - üü° D√º≈ü√ºk: {issues['low']}")
            report.append("")
        
        # Kategori bazlƒ± analiz
        report.append("## üìä Kategori Bazlƒ± Analiz")
        report.append("")
        
        categories = {}
        for finding in self.security_findings + self.quality_findings + self.simple_findings:
            if finding.category not in categories:
                categories[finding.category] = {"count": 0, "critical": 0, "high": 0, "medium": 0, "low": 0}
            
            categories[finding.category]["count"] += 1
            
            # Severity mapping
            severity = finding.severity.lower()
            if severity == "minor":
                severity = "low"
            elif severity == "major":
                severity = "medium"
            elif severity == "blocker":
                severity = "critical"
            
            categories[finding.category][severity] += 1
        
        sorted_categories = sorted(categories.items(), key=lambda x: x[1]["count"], reverse=True)
        
        for category, stats in sorted_categories:
            report.append(f"### {category}")
            report.append(f"- **Toplam:** {stats['count']}")
            report.append(f"- üî¥ Y√ºksek: {stats['high']}")
            report.append(f"- üü† Orta: {stats['medium']}")
            report.append(f"- üü° D√º≈ü√ºk: {stats['low']}")
            report.append("")
        
        # D√ºzeltme √∂nerileri
        fix_suggestions = self.generate_fix_suggestions()
        if fix_suggestions:
            report.append("## üîß D√ºzeltme √ñnerileri")
            report.append("")
            report.append(f"**Toplam D√ºzeltme √ñnerisi:** {len(fix_suggestions)}")
            report.append("")
            
            # D√ºzeltme √∂nerilerini kategorilere g√∂re grupla
            fix_by_category = {}
            for suggestion in fix_suggestions:
                if suggestion.rule_id not in fix_by_category:
                    fix_by_category[suggestion.rule_id] = []
                fix_by_category[suggestion.rule_id].append(suggestion)
            
            for rule_id, suggestions in fix_by_category.items():
                report.append(f"### {rule_id} ({len(suggestions)} √∂neri)")
                report.append("")
                
                for i, suggestion in enumerate(suggestions[:5], 1):  # Her kategori i√ßin ilk 5 √∂neri
                    report.append(f"#### {i}. {suggestion.file_path}:{suggestion.line_number}")
                    report.append(f"- **A√ßƒ±klama:** {suggestion.description}")
                    report.append(f"- **G√ºven:** {suggestion.confidence * 100:.0f}%")
                    report.append("")
                    report.append("**Orijinal Kod:**")
                    report.append(f"```\n{suggestion.original_code}\n```")
                    report.append("")
                    report.append("**√ñnerilen D√ºzeltme:**")
                    report.append(f"```\n{suggestion.fixed_code}\n```")
                    report.append("")
                
                if len(suggestions) > 5:
                    report.append(f"... ve {len(suggestions) - 5} daha fazla √∂neri")
                    report.append("")
        
        # Risk deƒüerlendirmesi
        report.append("## ‚ö†Ô∏è Risk Deƒüerlendirmesi")
        report.append("")
        
        high_security = security_by_severity["HIGH"]
        high_quality = quality_by_severity["HIGH"]
        
        if high_security > 0:
            report.append("### üî¥ Y√ºksek Risk")
            report.append(f"- **{high_security} g√ºvenlik a√ßƒ±ƒüƒ±** acil d√ºzeltme gerektiriyor")
            report.append("- Bu a√ßƒ±klar uygulamanƒ±zƒ±n g√ºvenliƒüini ciddi ≈üekilde etkileyebilir")
            report.append("- M√ºmk√ºn olan en kƒ±sa s√ºrede d√ºzeltilmelidir")
            report.append("")
        
        if high_quality > 0:
            report.append("### üü† Orta Risk")
            report.append(f"- **{high_quality} kod kalitesi sorunu** dikkat gerektiriyor")
            report.append("- Bu sorunlar kodun bakƒ±mƒ±nƒ± zorla≈ütƒ±rabilir")
            report.append("- Planlƒ± bir ≈üekilde d√ºzeltilmelidir")
            report.append("")
        
        if high_security == 0 and high_quality == 0:
            report.append("### üü¢ D√º≈ü√ºk Risk")
            report.append("- Kritik g√ºvenlik a√ßƒ±ƒüƒ± tespit edilmedi")
            report.append("- Kod kalitesi genel olarak iyi durumda")
            report.append("- D√ºzenli analizlerle bu durumu koruyun")
            report.append("")
        
        # √ñneriler
        report.append("## üí° Genel √ñneriler")
        report.append("")
        report.append("1. **G√ºvenlik:**")
        report.append("   - T√ºm input'larƒ± doƒürulayƒ±n")
        report.append("   - PreparedStatement kullanƒ±n")
        report.append("   - ≈ûifreleri g√ºvenli ≈üekilde saklayƒ±n")
        report.append("   - HTTPS kullanƒ±n")
        report.append("   - D√ºzenli g√ºvenlik taramalarƒ± yapƒ±n")
        report.append("")
        report.append("2. **Kod Kalitesi:**")
        report.append("   - SOLID prensiplerini uygulayƒ±n")
        report.append("   - Unit test yazƒ±n")
        report.append("   - Kod tekrarƒ±ndan ka√ßƒ±nƒ±n")
        report.append("   - Anlamlƒ± deƒüi≈üken isimleri kullanƒ±n")
        report.append("   - Code review s√ºre√ßlerini g√º√ßlendirin")
        report.append("")
        report.append("3. **S√ºrekli ƒ∞yile≈ütirme:**")
        report.append("   - Bu analizi d√ºzenli olarak √ßalƒ±≈ütƒ±rƒ±n")
        report.append("   - Trend analizi yapƒ±n")
        report.append("   - Takƒ±m eƒüitimleri d√ºzenleyin")
        report.append("   - Otomatik d√ºzeltmeleri kullanƒ±n")
        report.append("")
        
        # D√ºzeltme komutlarƒ±
        if fix_suggestions:
            report.append("## üöÄ Otomatik D√ºzeltme")
            report.append("")
            report.append("A≈üaƒüƒ±daki komutla otomatik d√ºzeltmeleri uygulayabilirsiniz:")
            report.append("")
            report.append("```bash")
            report.append(f"python .cursor/agents/security_quality_agent.py --path <kod_dizini> --auto-fix")
            report.append("```")
            report.append("")
            report.append("**Not:** Otomatik d√ºzeltme √∂ncesi yedek alƒ±nƒ±r.")
            report.append("")
        
        # Raporu kaydet
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report))
        
        print(f"‚úÖ Rapor olu≈üturuldu: {output_path}")
        
        # D√ºzeltme √∂nerilerini ayrƒ± dosyaya kaydet
        if fix_suggestions:
            fix_report_path = output_path.replace('.md', '_fixes.md')
            self.save_fix_suggestions(fix_suggestions, fix_report_path)
            print(f"‚úÖ D√ºzeltme √∂nerileri kaydedildi: {fix_report_path}")

    def save_fix_suggestions(self, suggestions: List[FixSuggestion], output_path: str) -> None:
        """D√ºzeltme √∂nerilerini ayrƒ± dosyaya kaydet"""
        report = []
        report.append("# üîß Detaylƒ± D√ºzeltme √ñnerileri")
        report.append(f"**Olu≈üturulma Tarihi:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        for i, suggestion in enumerate(suggestions, 1):
            report.append(f"## {i}. {suggestion.rule_id}")
            report.append(f"**Dosya:** `{suggestion.file_path}:{suggestion.line_number}`")
            report.append(f"**A√ßƒ±klama:** {suggestion.description}")
            report.append(f"**G√ºven:** {suggestion.confidence * 100:.0f}%")
            report.append("")
            report.append("### Orijinal Kod:")
            report.append(f"```\n{suggestion.original_code}\n```")
            report.append("")
            report.append("### √ñnerilen D√ºzeltme:")
            report.append(f"```\n{suggestion.fixed_code}\n```")
            report.append("")
            report.append("---")
            report.append("")
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(report))

def main():
    parser = argparse.ArgumentParser(description="G√ºvenlik ve Kod Kalitesi Analiz Agent'ƒ±")
    parser.add_argument("--path", required=True, help="Taranacak kod dizini")
    parser.add_argument("--output", default="security_quality_report.md", help="Rapor dosyasƒ±")
    parser.add_argument("--online", help="Online raporlar i√ßin proje URL'si")
    parser.add_argument("--rules", help="Kural dosyasƒ± yolu")
    parser.add_argument("--auto-fix", action="store_true", help="Otomatik d√ºzeltmeleri uygula")
    parser.add_argument("--no-backup", action="store_true", help="Yedek alma")
    parser.add_argument("--sonarqube-url", help="SonarQube sunucu URL'si")
    parser.add_argument("--sonarqube-token", help="SonarQube API token'ƒ±")
    parser.add_argument("--project-key", help="SonarQube proje anahtarƒ±")
    parser.add_argument("--max-issues", type=int, help="Maksimum √ßekilecek SonarQube issue sayƒ±sƒ± (None = sƒ±nƒ±rsƒ±z)")
    
    args = parser.parse_args()
    
    print("üîç G√ºvenlik ve Kod Kalitesi Analizi Ba≈ülatƒ±lƒ±yor...")
    
    agent = SecurityQualityAgent()
    
    # Dizini tara
    print(f"üìÅ Kod taranƒ±yor: {args.path}")
    agent.scan_directory(args.path)
    
    # Online raporlarƒ± √ßek
    online_reports = None
    if args.online:
        online_reports = agent.fetch_online_reports(
            args.online, 
            args.sonarqube_url, 
            args.sonarqube_token, 
            args.project_key,
            args.max_issues
        )
    
    # Rapor olu≈ütur
    print(f"üìù Rapor olu≈üturuluyor: {args.output}")
    agent.generate_report(args.output, online_reports)
    
    # Otomatik d√ºzeltme
    if args.auto_fix:
        print("üîß Otomatik d√ºzeltmeler uygulanƒ±yor...")
        fix_suggestions = agent.generate_fix_suggestions()
        
        if fix_suggestions:
            results = agent.apply_fixes(fix_suggestions, backup=not args.no_backup)
            print(f"‚úÖ D√ºzeltme sonu√ßlarƒ±:")
            print(f"   - Ba≈üarƒ±lƒ±: {results['success']}")
            print(f"   - Ba≈üarƒ±sƒ±z: {results['failed']}")
            print(f"   - Atlandƒ±: {results['skipped']}")
        else:
            print("‚ÑπÔ∏è  Uygulanabilir d√ºzeltme √∂nerisi bulunamadƒ±.")
    
    print("‚úÖ Analiz tamamlandƒ±!")

if __name__ == "__main__":
    main() 